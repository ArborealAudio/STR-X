name: Deploy

on:
  push:
    branches: ["master"]
  workflow_dispatch:
  release:

  # TODO: Set version based on SHA if non-release-triggered workflow
  # Get the SHA version like: VERSION=${GITHUB_SHA:0:5}

env:
  PROJECT: STR-X
  ARTIFACTS_PATH: build/STR-X_artefacts/Release/

jobs:
  build_and_deploy:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
        fail-fast: false
        matrix:
          include:
            - name: Linux
              os: ubuntu-20.04
            - name: macOS
              os: macos-12
            - name: Windows
              os: windows-2019
              cmake_args: "-DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++"

    steps:

    - name: Install Linux Deps
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install libasound2-dev libx11-dev \
          libxcomposite-dev libxcursor-dev libxext-dev libxinerama-dev \
          libxrandr-dev libxrender-dev libfreetype6-dev libglu1-mesa-dev \
          libjack-jackd2-dev ninja-build

    - name: Windows Install Ninja
      if: runner.os == 'Windows'
      run: |
        choco install ninja

    - name: MacOS Install Tools
      if: runner.os == 'macOS'
      run: |
        brew install ninja packages

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Checkout build scripts
      uses: actions/checkout@v3
      with:
        repository: ArborealAudio/scripts
        ref: deploy
        path: scripts
        token: ${{ secrets.WORKFLOW_PAT }}

  # PROBLEM: Need the .pkgproj somewhere in order to build installer

    - name: Import Certs (MacOS)
      uses: apple-actions/import-codesign-certs@v2
      if: runner.os == 'macOS'
      with:
        p12-file-base64: ${{ secrets.DEV_ID_APP_CERT }}
        p12-password: ${{ secrets.DEV_ID_APP_PASSWORD }}

    - name: Build
      if: runner.os == 'macOS' # just do Mac for now to test codesigning
      env:
        APP_CERT: ${{ secrets.DEVELOPER_ID_APPLICATION }}
        INSTALL_CERT: ${{ secrets.DEVELOPER_ID_INSTALLER }}
        APPLE_USER: ${{ secrets.NOTARY_USER }}
        NOTARY_PW: ${{ secrets.NOTARY_PASSWORD }}
        TEAM_ID: ${{ secrets.TEAM_ID }}
        VERSION: "1.2.1"
      run: |
        ./scripts/mac-build.sh -n STR-X -v $VERSION --clap
        echo "VERSION=$VERSION" >> "$GITHUB_ENV"
        echo "INSTALLER_PATH=installer/build/${{ env.PROJECT }}-mac.dmg" >> "$GITHUB_ENV"
      
    # TODO: Get installer for Windows, tarball for Linux

    # - name: Upload Linux
    #   if: runner.os == 'Linux'
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: ${{ env.PROJECT }}-linux-${{ env.VERSION }}.tar.xz
    #     path: ${{ env.ARTIFACTS_PATH }}/${{ env.PROJECT}}-linux-${{ env.VERSION }}.tar.xz

    - name: Upload MacOS
      if: runner.os == 'macOS'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PROJECT }}-mac.dmg
        path: ${{ env.INSTALLER_PATH }}

    # - name: Upload Windows
    #   if: runner.os == 'Windows'
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: ${{ env.PROJECT }}-windows-${{ env.VERSION }}.zip
    #     path: ${{ env.ARTIFACTS_PATH }}/${{ env.PROJECT}}-windows-${{ env.VERSION }}.zip
