# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      matrix:
        os: [ubuntu-22.04, windows-2019, macos-12]

    steps:
    - name: Install Linux Deps
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install libasound2-dev libjack-jackd2-dev \
          ladspa-sdk \
          libcurl4-openssl-dev  \
          libfreetype6-dev \
          libx11-dev libxcomposite-dev libxcursor-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev \
          libwebkit2gtk-4.0-dev \
          libglu1-mesa-dev mesa-common-dev
          
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - uses: seanmiddleditch/gha-setup-ninja@master
    - run: cmake -Bbuild -GNinja -DPRODUCTION_BUILD=1 -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build build --config Release

    - name: Validate Unix
      if: runner.os != 'Windows'
      run: ./validate.sh
    - name: Validate Windows
      if: runner.os == 'Windows'
      run: bash validate.sh
